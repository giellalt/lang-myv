.. -*- mode: rst -*-
========================================
 The Erzya morphology and tools
========================================

This directory contains source files for the Erzya language morphology and
dictionary. The data and implementation are licenced under __GNU GPL__ licence
also detailed in the LICENCE file of this directory. The authors named in the
AUTHORS file are available to grant other licencing choices.

Installation and compilation, and a short note on usage, is documented in the
file INSTALL.

Documentation is scattered around on giellateknos pages, e.g.:

* http://giellatekno.uit.no/myvdoc/index.html
* http://giellatekno.uit.no/doc/tools/docu-myv-manual.html

This is a test

Requirements
------------

In order to compile and use Erzya language morphology and dictionaries,
you need:

* Xerox Finite-State Morphology tools, or

* Helsinki Finite-State Technology library and tools, version 3.8 or newer

Optionally:

* VislCG3 Constraint Grammar tools

Downloading
-----------

The Erzya language sources can be acquired using `giellatekno SVN
repository <http://divvun.no/doc/infra/anonymous-svn.html>`_, from the
language specific directory, after the core has been downloaded and initial
setup has been performed.

Installation
------------

INSTALL describes the GNU build system in detail, but for most users the usual:

	./configure
	make
	(as root) make install

should result in a local installation and::

	(as root) make uninstall

in its uninstallation.

If you would rather install in e.g. your home directory
(or aren't the system administrator), you can tell ./configure::

        ./configure --prefix=$HOME

If you are checking out the development versions from SVN you must first create
and install the necessary autotools files from the host system:

  autoreconf -i

It is common practice to keep `generated files out of version control
<http://www.gnu.org/software/automake/manual/automake.html#CVS>`_.

VPATH builds
------------

If you want to keep the source code tree clean, a VPATH build is the solution.
The idea is to create a build dir somewhere outside of the source code tree,
and call `configure` from there. Here is one VPATH variant of the standard
procedure:

	mkdir build && cd build
	../configure
	make
	(as root) make install

This will keep all the generated files within the build/ dir, and keep the src/
dir (mostly) free of generated files.

For further installation instruction refer to file ``INSTALL``, which contains
the standard installation instructions for GNU autoconf based software.

.. vim: set ft=rst:
